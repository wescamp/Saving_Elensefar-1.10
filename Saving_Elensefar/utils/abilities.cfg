#textdomain wesnoth-Saving_Elensefar

# inspire > meneldur
# distract and blitz > Madru
# battle tutor > Black the Red

#define SPECIAL_NOTES_DISTRACT
    #textdomain wesnoth-trow
_" This unit is capable of distracting opponents, allowing allied units to trespass their Zones of Control and move unhindered around them." #enddef

#define SPECIAL_NOTES_INSPIRE
    #textdomain wesnoth-thot
_" The presence of this unit inspires own units next to it to deal more damage in combat, though this only applies to units of lower or equal level." #enddef

#define SPECIAL_NOTES_BLITZ
    #textdomain wesnoth-Saving_Elensefar
_" This unit is able to grant the skirmisher ability to allied units that stand next to it on start of his turn." #enddef

#define SPECIAL_NOTES_BATTLE_TUTOR
_" The ability to teach battle experience to adjacent allied units allows them to earn experience points equivalent of the second unit level whenever the tutor attacks with his melee attack and hits at least once." #enddef

# wmllint: unbalanced-on
#define ABILITY_BLITZ
    [blitz]
        id=blitz
        name= _ "blitz"
        description= _ "Blitz:
Allies that start their turn adjacent to this unit are granted Skirmisher for that turn."
        affect_self=no
        affect_allies=yes
    [/blitz]
[/abilities]
[event]
    name=turn refresh
    first_time_only=no

    [store_unit]
        [filter]
            side=$side_number
            [and]
                [filter_adjacent]
                    ability=blitz
                    is_enemy=no
                [/filter_adjacent]
            [/and]
            [not]
                ability=skirmisher
                [or]
                    ability=blitz
                [/or]
            [/not]
        [/filter]
        variable=blitzed_on
    [/store_unit]

    {FOREACH blitzed i_temp}
        [object]
            silent="yes"
#ifver WESNOTH_VERSION < 1.11.0
			duration=level
#else
            duration=turn
#endif
            [filter]
                id=$blitzed[$i_temp].id
            [/filter]
            [effect]
                apply_to=new_ability
                [abilities]
                    {ABILITY_SKIRMISHER}
                [/abilities]
            [/effect]
            [effect]
                apply_to=status
                add=blitzed
            [/effect]
        [/object]
    {NEXT i_temp}
    {CLEAR_VARIABLE blitzed}
    [redraw][/redraw]

    # still necessary ?
    [event]
        name=side turn end,time over,enemies defeated,defeat,victory
        first_time_only=no

        [store_unit]
            [filter]
                [filter_wml]
                    [status]
                        blitzed=yes
                    [/status]
                [/filter_wml]
            [/filter]
            variable=blitzed_off
        [/store_unit]

        {FOREACH blitzed_off i_temp}
            [set_variables]
                name=blitzed_off[$i_temp].abilities.skirmisher
                mode=replace
                [value]
                [/value]
            [/set_variables]
            [clear_variable]
                name=blitzed_off[$i_temp].status.blitzed
            [/clear_variable]
            [unstore_unit]
                variable=blitzed_off[$i_temp]
            [/unstore_unit]
        {NEXT i_temp}
        {CLEAR_VARIABLE blitzed_off}
        [redraw][/redraw]
    [/event]
[/event]
[+abilities]
#enddef

#define ABILITY_BATTLETUTOR_2
    [battle_tutor]
        id=battletutor_2
        name= _ "battle tutor"
        description= _ "Battle Tutor:
This unit's ability to teach battle skills gives each adjacent allied unit a small boost to experience earned in battle."
    [/battle_tutor]
[/abilities]
[event]
    name=attack
    first_time_only=no

    [filter]
        ability=battletutor_2
    [/filter]

    [filter_attack]
        range=melee
    [/filter_attack]

    [event]
        name=attacker hits

        [filter]
            ability=battletutor_2
        [/filter]

        [filter_attack]
            range=melee
        [/filter_attack]

        [event]
            name=attack end
            delayed_variable_substitution=yes

            [filter]
                ability=battletutor_2
            [/filter]

            [modify_unit]
            	[filter]
	            	[filter_adjacent]
                		ability=battletutor_2
                		is_enemy=no
               		[/filter_adjacent]
                [/filter]
                experience="$($this_unit.experience + $second_unit.level)"
            [/modify_unit]
            
            [floating_text]
            	text="<span color='lightblue'>" + _ "$second_unit.level XP" + "</span>"
            	x,y=$unit.x,$unit.y
            [/floating_text]
        [/event]
    [/event]
[/event]
[+abilities]
#enddef

#define ABILITY_BATTLETUTOR_3
    [battle_tutor]
        id=battletutor_3
        name= _ "Battle Tutor"
        description= _ "Battle Tutor:
This unit's ability to teach battle skills gives each adjacent allied unit a small boost to his experience earned in battle."
    [/battle_tutor]
[/abilities]
[event]
    name=attack
    first_time_only=no

    [filter]
        ability=battletutor_3
    [/filter]

    [filter_attack]
        range=melee
    [/filter_attack]

    {VARIABLE hits $second_unit.level}

    [event]
        name=attacker hits
        first_time_only=no
        
        [filter]
            ability=battletutor_3
        [/filter]

        [filter_attack]
            range=melee
        [/filter_attack]

        {VARIABLE_OP hits add 1}
    [/event]

        [event]
            name=attack end
            delayed_variable_substitution=yes

            [filter]
                ability=battletutor_3
            [/filter]

            [if]
            	{VARIABLE_CONDITIONAL second_unit.experience greater_than $hits}
                [then]
                    {VARIABLE_OP second_unit.experience sub $hits}
                [/then]
                [else]
                    {VARIABLE second_unit.experience 0}
                [/else]
            [/if]

            [unstore_unit]
                variable=second_unit
            [/unstore_unit]

            [modify_unit]
            	[filter]
	            	[filter_adjacent]
                		ability=battletutor_3
                		is_enemy=no
               		[/filter_adjacent]
                [/filter]
                experience="$($this_unit.experience + $hits)"
            [/modify_unit]
            
            [floating_text]
            	text="<span color='lightblue'>" + _ "$hits XP" + "</span>"
            	x,y=$unit.x,$unit.y
            [/floating_text]

            {CLEAR_VARIABLE hits}
        [/event]
[/event]
[+abilities]
#enddef
# wmllint: unbalanced-off

#define ABILITY_DISTRACT
    #textdomain wesnoth-trow
    [skirmisher]
        id=distract
        name= _ "distract"
        description= _ "Distract:
This unit negates enemy Zones of Control around itself for allied units (but not for itself)."
        affect_self=no
        affect_allies=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
           	[filter]
				[not]
            		ability=distract
            		[or]
						ability=skirmisher
					[/or]
				[/not]
           	[/filter]
        [/affect_adjacent]
    [/skirmisher]
#enddef

#define ABILITY_INSPIRE_LEVEL_3
    #textdomain wesnoth-thot
    # Canned definition of the Inspire (level 3) ability to be included in an
    # [abilities] clause.
    [leadership]
        id=inspire
        value=100
        cumulative=no
        name= _ "inspire"
        description= _ "Inspire:
This unit can inspire own L0, L1, L2, or L3 units that are next to it, making them fight better. Adjacent own units of L3 will do more 25% more damage; L2 units will do 50% more, L1 will do 75% more, and L0 units will do 100% more."
        affect_self=no
        affect_allies=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                level=0
            [/filter]
        [/affect_adjacent]
    [/leadership]
    [leadership]
        id=inspire
        value=75
        cumulative=no
        affect_self=no
        affect_allies=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                level=1
            [/filter]
        [/affect_adjacent]
    [/leadership]
    [leadership]
        id=inspire
        value=50
        cumulative=no
        affect_self=no
        affect_allies=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                level=2
            [/filter]
        [/affect_adjacent]
    [/leadership]
    [leadership]
        id=inspire
        value=25
        cumulative=no
        affect_self=no
        affect_allies=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                level=3
            [/filter]
        [/affect_adjacent]
    [/leadership]
#enddef

#define ABILITY_INSPIRE_LEVEL_2
    #textdomain wesnoth-thot
    # Canned definition of the Inspire (level 2) ability to be included in an
    # [abilities] clause.
    [leadership]
        id=inspire
        value=75
        cumulative=no
        name= _ "inspire"
        description= _ "Inspire:
This unit can inspire own L0, L1, or L2 units that are next to it, making them fight better. Adjacent own units of L2 will do more 25% more damage; L1 units will do 50% more, and L0 will do 75% more."
        affect_self=no
        affect_allies=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                level=0
            [/filter]
        [/affect_adjacent]
    [/leadership]
    [leadership]
        id=inspire
        value=50
        cumulative=no
        affect_self=no
        affect_allies=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                level=1
            [/filter]
        [/affect_adjacent]
    [/leadership]
    [leadership]
        id=inspire
        value=25
        cumulative=no
        affect_self=no
        affect_allies=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                level=2
            [/filter]
        [/affect_adjacent]
    [/leadership]
#enddef

#define WEAPON_SPECIAL_CHARM
    [charm]
        id=charm
        name= _ "charm"
        description= _ "Charm:
This unit charms its opponents, whenever it hits on attack the defender jumps instantely to the attacker side.

Charmed units may move and atack and returns to their original side on start of that side turn."
    [/charm]
[/abilities]
[event]
    name=attacker hits
    first_time_only=no

    [filter_attack]
        special=charm
    [/filter_attack]

    [filter_second]
        canrecruit=no
    [/filter_second]

    [store_unit]
        [filter]
            id=$second_unit.id
        [/filter]
        variable=charmed_unit
        # that breaks the attack
        kill=yes
    [/store_unit]

    [event]
        name=attack end
        delayed_variable_substitution=yes

        {VARIABLE charmed_unit.variables.original_side $second_unit.side}
        {VARIABLE charmed_unit.moves 1}
        {VARIABLE charmed_unit.attacks_left 1}

        [unstore_unit]
            variable=charmed_unit
            find_vacant=no
        [/unstore_unit]
    [/event]

    [event]
        name=side turn
        first_time_only=no

        [store_unit]
            [filter]
                [not]
                    side=$side_number
                [/not]
            [/filter]
            variable=may_be_charmed
        [/store_unit]

        {FOREACH may_be_charmed i}
            {IF_VAR may_be_charmed[$i].variables.original_side not_equals $empty (
                [then]
                    {VARIABLE may_be_charmed[$i].side $may_be_charmed[$i].variables.original_side}
                    {CLEAR_VARIABLE may_be_charmed[$i].variables.original_side}
                    [unstore_unit]
                        variable=may_be_charmed[$i]
                        find_vacant=no
                    [/unstore_unit]
                [/then]
            )}
        {NEXT i}
        {CLEAR_VARIABLE may_be_charmed}
    [/event]

    [event]
        name=victory,defeat,enemies defeated,time over
        first_time_only=no

        [store_unit]
            [filter]
            [/filter]
            variable=may_be_charmed
        [/store_unit]

        {FOREACH may_be_charmed i}
            {IF_VAR may_be_charmed[$i].variables.original_side not_equals $empty (
                [then]
                    {VARIABLE may_be_charmed[$i].side $may_be_charmed[$i].variables.original_side}
                    {CLEAR_VARIABLE may_be_charmed[$i].variables.original_side}
                    [unstore_unit]
                        variable=may_be_charmed[$i]
                        find_vacant=no
                    [/unstore_unit]
                [/then]
            )}
        {NEXT i}
        {CLEAR_VARIABLE may_be_charmed}
    [/event]
[/event]
[+abilities]
#enddef
